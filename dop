const bcrypt = require("bcrypt");
const jwt = require("jsonwebtoken");
const Users = require("../models/user.model");

const CLIENT_URL = process.env.CLIENT_URL;
const userCtrl = {
  register: async (req, res) => {
    try {
      const { name } = req.body;
      if (!name)
        return res.status(400).json({ msg: "veuilez entrer votre pseudo " });

      const user = await Users.findOne({ name });
      if (user) return res.status(400).json({ msg: "ce pseudo est déjà pris" });

      const newUser = new Users({
        name,
      })

      const refresh_token = createRefreshToken({ id: user._id });
        res.cookie("refreshtoken", refresh_token, {
          httpOnly: true,
          path: "user/refresh_token",
          maxAge: 7 * 24 * 60 * 60 * 1000, // valable 7jours
        });
  
        res.json({ access_token: refresh_token });

      
    } catch (err) {
      return res.status(500).json({ msg: err.message });
    }
  },
};

const validateEmail = (email) => {
  return email.match(
    /^(([^<>()[\]\\.,;:\s@\"]+(\.[^<>()[\]\\.,;:\s@\"]+)*)|(\".+\"))@((\[[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\.[0-9]{1,3}\])|(([a-zA-Z\-0-9]+\.)+[a-zA-Z]{2,}))$/
  );
};

const createActivationToken = (payload) => {
  return jwt.sign(payload, process.env.ACTIVATION_TOKEN_SECRET, {
    expiresIn: "60d",
  });
};
const createAccessToken = (payload) => {
  return jwt.sign(payload, process.env.ACCESS_TOKEN_SECRET, {
    expiresIn: "60d",
  }); // a modifier avant le deploiement
};
const createRefreshToken = (payload) => {
  return jwt.sign(payload, process.env.REFRESH_TOKEN_SECRET, {
    expiresIn: "60d",
  });
};

module.exports = userCtrl;
